// This codes use HAPRAD and the histograms generated by PhiHist.cpp to calculate the RC factors
// Return the Rc facotors in Phi histograms, one for each 4Dim bin of Q2, Nu, Zh, Pt2
// Can be compiled using Make, but you need to compile HAPRAD before
// For the target name use (C,Fe,Pb) for the solids targets and (DC,DFe,DPb) for the liquid target

#include <fstream>
#include <iostream>
#include <string>
#include "TString.h"
#include "TRadCor.h"
#include "TFile.h"
#include "TROOT.h"
#include "TNtuple.h"
#include "TMath.h"
#include "TH1.h"
#include "TFile.h"
#include "TStopwatch.h"
#include "haprad_constants.h"
#include "Binning_Rc.h"


int main(int argc, char* argv[]) {

  if(argc != 2) {
    std::cout << "Insert (just) the target name as a parameter" << std::endl;
    return 0;
  }

  TStopwatch t;

  std::cout << "Start" << std::endl;

  const TString inputDirectory  = "/home/matias/proyecto/Pt2Broadening_multi-pion/Data/Final/";
  const TString plotDirectory   = "/home/matias/proyecto/Pt2Broadening_multi-pion/Plots/Final/";
  const TString outputDirectory = "/home/matias/proyecto/Pt2Broadening_multi-pion/Data/Final/";
  std::string target = argv[1];
  // Creating a array of chars instead of a string to use Form method
  int n = target.length();
  char targetArr[n + 1];
  strcpy(targetArr, target.c_str());

  Double_t f1;
  // Double_t f3;
  Double_t NAZ;
  Double_t m = TMath::Power((kMassNeutron + kMassPion), 2);
  float Masa = 0.938; // Mass Nucleon (Proton)
  Double_t a1, a2, a3;
  int sysReturn;

  gROOT->cd();
  TFile* outputFile = new TFile(outputDirectory + Form("RcFactors_%s.root", targetArr), "RECREATE");
  gROOT->cd();

  TRadCor rc;


  a1 = 1;
  a2 = 0;
  a3 = a1/a2;

  if(target == "C")        NAZ = 0.5;
  else if(target == "Fe")  NAZ = 0.5;
  else if(target == "Pb")  NAZ = 82./208.;
  else if(target == "DC")  NAZ = 0.5;
  else if(target == "DFe") NAZ = 0.5;
  else if(target == "DPb") NAZ = 0.5;
  else NAZ = 0.5;

  TH1F* histRcFactors  = new TH1F("RcFactors", "", N_Phi, -180, 180);

  for(int nPion = 1; nPion <= N_PION ; nPion++) { // Loops in every number of pion

    sysReturn = system("cp " + inputDirectory + target + Form("newphihist%i.root .", nPion));
    if(sysReturn == 256){
	    std::cout << "File " << inputDirectory << target  << " not found" << std::endl;
	    return 0;
    }
    sysReturn = system(("mv " + target + Form("newphihist%i.root", nPion) + " newphihist.root").c_str() );

    TFile* fileBins = new TFile("newphihist.root", "READ");
    TNtuple* ntupleBins = (TNtuple*) fileBins->Get("AAcAcc_data");

    float Q2, Xb, Zh, Pt, Phi;

    ntupleBins->SetBranchAddress("Q2", &Q2);
    ntupleBins->SetBranchAddress("Xb", &Xb);
    ntupleBins->SetBranchAddress("Zh", &Zh);
    ntupleBins->SetBranchAddress("Pt", &Pt);


    for(int i = 0; i < ntupleBins->GetEntries(); i++) {
      ntupleBins->GetEntry(i);
      for(int PhiCounter = 0 ; PhiCounter < N_Phi ; PhiCounter++) { // Loops in every Phi bin
        std::cout << "Bin selected: " << nPion <<  "-" << Q2 << "-" << Xb << "-" << Zh << "-" << Pt << "-" << PhiCounter << std::endl;

        Phi = (Phi_BINS[PhiCounter] + Phi_BINS[PhiCounter+1])/2;

        rc.CalculateRCFactor(5.015, Xb, Q2, Zh, Pt, Phi, m, NAZ);
				f1 = rc.GetFactor1();
				// f3 = rc.GetFactor3();
				if(TMath::IsNaN(f1) || f1 == a3) f1 = 0;
				// if(TMath::IsNaN(f3) || f3 == a3) f3 = 0;
        std::cout << "El Factor es: " << f1 <<std::endl;
        histRcFactors->SetBinContent(PhiCounter + 1, f1);
      }// End Phi loop

      outputFile->cd();
      histRcFactors->Write(Form("RcFactor_%s_%.3f%.3f%.3f%.3f_%i", targetArr, Q2, Xb, Zh, Pt, nPion));
      histRcFactors->Reset();
      gROOT->cd();

    }
    delete ntupleBins;
    fileBins->Close();
    sysReturn = system("rm newphihist.root");
  }// End number pion event loop

  outputFile->Close();
  t.Print();
  return 0;
}
